<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Create GPX Route with Google Maps API v3" height="600" scaling="false" />
  <Content type="html"><![CDATA[
<!DOCTYPE html>
<html lang="ja">
<!--
    Copyright (c) 2014 Kei Misawa

    This software is released under the MIT License.

    http://opensource.org/licenses/mit-license.php
-->
<head>
<meta charset="utf-8"/>
<title>Create GPX Route with Google Maps API v3</title>
<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/themes/redmond/jquery-ui.css" />
<style type="text/css">
html	{ height: 100%; }
body	{ height: 100%; margin: 0; padding: 0; }

#center_panel	{ position: absolute; right: 0px; top: 0px; width: 70%; height: 100%;}
#map_canvas	{ position: absolute; right: 0px; top: 0px; width: 100%; height: 80%;}
#graph_panel	{ position: absolute; right: 0px; top: 80%; width: 100%; height: 20%; overflow: hidden; }
#graph_canvas	{ margin: 1px; }

#side_panel	{ position: absolute; left: 0px; top: 0px; width: 30%; min-width: 200px; height: 100%; overflow: hidden; }
#accordion	{ font-size: 80%; }

#tab_search input[type="text"]	{ width: 100%; }
#tab_search input[type="submit"]	{ width: 100%; }
#tab_search select	{ width: 100%; }

#gpx_download_link	{ display: block; width: 100%; }
#tab_gpx select	{ width: 100%; }
#tab_gpx input[type="text"]	{ width: 100%; }
#button_add_elevation	{ width: 100%; }
#gpx_text	{ width: 100%; height : 80%; font-size: 10px; overflow: auto; }

button.ui-dialog-titlebar-close	{ display: none; }
</style>
</head>
<body>

<div id="center_panel">
 <div id="map_canvas"></div>
 <div id="graph_panel">
  <div id="graph_canvas"></div>
 </div>
</div>

<div id="side_panel">
<div id="accordion">
<h3>Search</h3>
<div id="tab_search">
 <form>
 Origin: 
 <div><input id="input_origin" type="text" value="東京駅" /></div>
 <div id="waypoints">Via:
  <input id="input_waypoint_01" type="text" value="" />
  <input id="input_waypoint_02" type="text" value="" />
  <input id="input_waypoint_03" type="text" value="" />
  <input id="input_waypoint_04" type="text" value="" />
  <input id="input_waypoint_05" type="text" value="" />
  <input id="input_waypoint_06" type="text" value="" />
  <input id="input_waypoint_07" type="text" value="" />
  <input id="input_waypoint_08" type="text" value="" />
 </div>
 Destination:
 <div><input id="input_destination" type="text" value="横浜駅" /></div>
 <div><label><input id="input_avoid_highways" type="checkbox" checked="checked" value=""/>Avoid Highways</label></div>
 <div><label><input id="input_avoid_tolls" type="checkbox" checked="checked" value=""/>Avoid Tolls</label></div>
 <div><label><input id="input_optimize_waypoints" type="checkbox" value=""/>Optimize waypoints</label></div>
 <select id="select_travel_mode">
  <option value="DRIVING" selected="selected">Driving</option>
  <option value="WALKING">Walking</option>
 </select>
 <input type="submit" id="button_calc_route" value="Calculate Route" />
 </form>
</div>
<h3>GPX</h3>
<div id="tab_gpx">
 <div id="tab_gpx_001">
  <span>GPX File Name:</span>
  <input id="input_download_filename" type="text" value="download.gpx" />
  <a id="gpx_download_link">Download</a>
  <select id="select_reduce_points">
   <option value="100">Reduce into 100 points</option>
   <option value="200">Reduce into 200 points</option>
   <option value="400">Reduce into 400 points</option>
   <option value="800">Reduce into 800 points</option>
   <option value="2000">Reduce into 2000 points</option>
   <option value="4000">Reduce into 4000 points</option>
   <option value="8000">Reduce into 8000 points</option>
   <option value="0" selected="selected">No reduction</option>
  </select>
  <button id="button_add_elevation">Add Elevation</button>
  <div id="gpx_info"></div>
 </div>
 <textarea id="gpx_text" readonly="readonly" wrap="off"></textarea>
</div>
<h3>Directions</h3>
<div id="tab_directions">
 <div id="directions_panel"></div>
</div>
</div>
</div>

<!--<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true" ></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
<script type="text/javascript" src="http://code.highcharts.com/highcharts.js"></script>-->
<script type="text/javascript" defer="defer">
/* global google, BlobBuilder */
var map;
var gpxdata = {
	name: '',
	bounds: {
		minlat: 0, minlon: 0, maxlat: 0, maxlon: 0
	},
	desc: '',
	trksegs: [[]]
};

function loadScript(url){
	'use strict';
	var script = document.createElement("script");
	script.type = "text/javascript";
	script.src = url[0];
	if(url.length > 1){
		script.onload = function(){
			loadScript(url.slice(1));
		};
	}
	document.body.appendChild(script);
}
loadScript([
	'http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js',
	'http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js',
	'http://code.highcharts.com/highcharts.js',
	'http://maps.google.com/maps/api/js?sensor=true&callback=initialize'
]);

function initialize(){
	'use strict';
	// Google Maps Initialize
	map = new google.maps.Map(document.getElementById('map_canvas'), {
		zoom: 6,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		center: new google.maps.LatLng(35.681382, 139.766084)
	});
	var directionsDisplay = new google.maps.DirectionsRenderer({
		draggable: true
	});
	directionsDisplay.setMap(map);
	directionsDisplay.setPanel(document.getElementById('directions_panel'));

	// Route Drag on Map
	google.maps.event.addListener(directionsDisplay, 'directions_changed', function() {
		createGPXFromDirections(directionsDisplay.directions);
		updateSearchConditions(directionsDisplay.directions);
		$('#accordion').accordion('option', 'active', 1);
		$('#gpx_download_link').button('option', 'disabled', false );
		$('#select_reduce_points').removeAttr('disabled');
		$('#button_add_elevation').button('option', 'disabled', false );
	});

	// Right Click on Map
	$('<ul id="rmenu">' +
		'<li><a id="rmenu_set_origin">Set this point as Origin<\/a><\/li>' +
		'<li><a id="rmenu_set_destination">Set this point as Destination<\/a><\/li>' +
		'<li><a id="rmenu_clear_waypoints">Clear all Waypoints<\/a><\/li>' +
		'<\/div>').appendTo($('body')).menu().css('position', 'absolute').hide();
	google.maps.event.addListener(map, 'rightclick', function(point) {
		(function(lat, lng){
			$('#rmenu_set_origin').off('click').click(function(event){
				event.preventDefault();
				$('#input_origin').val(lat + ',' + lng);
				$('#rmenu').hide();
				$('#accordion').accordion('option', 'active', 0);
				if(typeof gpxdata.trksegs[0][0] !== 'undefined'){
					calcRoute(directionsDisplay);
				}
			});
			$('#rmenu_set_destination').off('click').click(function(event){
				event.preventDefault();
				$('#input_destination').val(lat + ',' + lng);
				$('#rmenu').hide();
				$('#accordion').accordion('option', 'active', 0);
				if(typeof gpxdata.trksegs[0][0] !== 'undefined'){
					calcRoute(directionsDisplay);
				}
			});
			$('#rmenu_clear_waypoints').off('click').click(function(event){
				event.preventDefault();
				for(var i = 1; i <= 8; i++){
					$('#input_waypoint_' + ('0' + i).slice(-2)).val('');
				}
				if(typeof gpxdata.trksegs[0][0] !== 'undefined'){
					calcRoute(directionsDisplay);
				}
			});
		})(point.latLng.lat().toFixed(5), point.latLng.lng().toFixed(5));
		$('#rmenu').css({
			'left': point.pixel.x + $('#map_canvas').position().left + $('#center_panel').position().left,
			'top': point.pixel.y + $('#map_canvas').position().top + $('#center_panel').position().top
		}).on('mouseleave', function(){
			setTimeout(function(){$('#rmenu').hide();}, 200);
		}).show();
	});
	google.maps.event.addListener(map, 'click', function(point) {
		$('#rmenu').hide();
	});

	// Dialog
	$('<div id="dialog"><\/div>').dialog({
		modal: true,
		closeOnEscape: false,
		autoOpen: false,
		draggable: false,
		resizable: false
	});
	// Side Panel
	$('#accordion').accordion({
		heightStyle: 'fill',
		animate: false,
		activate:  function(event, ui){
			$('#gpx_text').height(
				$('#tab_gpx').innerHeight() - $('#tab_gpx_001').outerHeight() - $('#tab_gpx_001').position().top
			);
		}
	});
	// Resizable
	$('#side_panel').resizable({
		handles: 'e',
		resize: function(event, ui){
			$('#center_panel').width($('body').innerWidth() - $('#side_panel').width());
			$('#graph_panel').resize();
		}
	});
	$('#graph_panel').resizable({
		handles: 'n',
		resize: function(event, ui){
			$('#map_canvas').height($('#center_panel').innerHeight() - $('#graph_panel').height());
		}
	}).resize(function(){
		$('#graph_canvas').highcharts().setSize($('#graph_panel').innerWidth(), $('#graph_panel').innerHeight());
	});

	// Input Check
	var geocodingService = new google.maps.Geocoder();
	$('#tab_search input[type="text"]').blur(function(){
		var $input = $(this);
		if($input.val() !== ''){
			geocodingService.geocode({'address': $input.val()}, function(results, status) {
				if(status === google.maps.GeocoderStatus.OK){
					$input.removeClass('ui-state-error');
				}else{
					$input.addClass('ui-state-error');
				}
			});
		}else{
			$input.removeClass('ui-state-error');
		}
	});

	// Button Events
	$('#button_calc_route').button().attr('title', 'calculate route').click(function(event){
		calcRoute(directionsDisplay);
		event.preventDefault();
	});

	$('#gpx_download_link').button({ disabled: true }).attr('title', 'download gpx file to your PC');
	$('#select_reduce_points').attr('disabled', 'disabled').change(function(){
		simplifyGPX($('#select_reduce_points').val());
		createGPXDownloadLink();
	});
	$('#button_add_elevation').button({ disabled: true }).click(function(){
		$('#dialog').html('<div id="dialog_message"><\/div><div id="dialog_progressbar"><\/div>').dialog({
			title: 'Elevation Addition'
		}).dialog('open');
		$('#dialog_progressbar').progressbar({value: 0});
		addElevationToGPX(function(mes){
			if(mes.state === 'finished'){
				createGPXDownloadLink();
				$('#dialog').dialog('close');
			}else{
				$('#dialog_message').html(mes.content);
				$('#dialog_progressbar').progressbar('option', {
					value: mes.value,
					max: mes.max
				});
			}
		});
	}).attr('title', 'add elevation to each trkpt element from Google Maps Elevation API');

	$('#input_download_filename').change(function(){
		$('#gpx_download_link').attr('download', $(this).val());
	});

	createGPXDownloadLink();
};

function calcRoute(directionsDisplay) {
	'use strict';
	var waypoints = [];
	for(var i = 1; i <= 8; i++){
		if(document.getElementById('input_waypoint_' + ('0' + i).slice(-2)).value){
			waypoints.push({
				location: document.getElementById('input_waypoint_' + ('0' + i).slice(-2)).value,
				stopover: document.getElementById('input_optimize_waypoints').checked
			});
		}
	}
	var request = {
		origin: document.getElementById('input_origin').value,
		destination: document.getElementById('input_destination').value,
		travelMode: google.maps.TravelMode[document.getElementById('select_travel_mode').value],
		avoidHighways: document.getElementById('input_avoid_highways').checked,
		avoidTolls: document.getElementById('input_avoid_tolls').checked,
		waypoints: waypoints,
		optimizeWaypoints: document.getElementById('input_optimize_waypoints').checked
	};
	$('#dialog').dialog({
		title: 'Route Calculation'
	}).html('calculating...').dialog('open');
	var directionsService = new google.maps.DirectionsService();
	directionsService.route(request, function(response, status) {
		if (status === google.maps.DirectionsStatus.OK) {
			directionsDisplay.setDirections(response);
			$('#dialog').dialog('close');
		} else {
			$('#dialog').html('<span class="ui-icon ui-icon-alert"><\/span>ルートが見つかりませんでした').dialog('option',{
				buttons: [{
					text: 'OK',
					click: function(e, ui){
						$(this).dialog('close');
						$(this).dialog('option', {buttons: []});
					}
				}]
			});
		}
	});
}

function createGPXFromDirections(response){
	'use strict';
	var route = response.routes[0];
	var bounds = route.bounds.toUrlValue().split(',');
	
	gpxdata.bounds.minlat = bounds[0];
	gpxdata.bounds.minlon = bounds[1];
	gpxdata.bounds.maxlat = bounds[2];
	gpxdata.bounds.maxlon = bounds[3];
	gpxdata.desc = route.copyrights;
	gpxdata.name = route.legs[0].start_address + ' to ' + route.legs[route.legs.length - 1].end_address;
	gpxdata.trksegs = [[]];
	
	var oldlat = 540;
	var oldlng = 540;
	var trkseg = gpxdata.trksegs[0];
	for(var i = 0; i < route.legs.length; i++){
		for(var j = 0; j < route.legs[i].steps.length; j++){
			for(var k = 0; k < route.legs[i].steps[j].path.length; k++){
				var lat = route.legs[i].steps[j].path[k].lat();
				var lng = route.legs[i].steps[j].path[k].lng();
				
				if((lat !== oldlat) || (lng !== oldlng)){
					trkseg.push({
						lat: lat,
						lon: lng,
						enabled: true,
						ele: null,
						priority: null
					});
					oldlat = lat;
					oldlng = lng;
				}
			}
		}
	}
	
	simplifyGPX($('#select_reduce_points').val());
	createGPXDownloadLink();
}

function updateSearchConditions(response){
	'use strict';
	var route = response.routes[0];
	
	$('#input_origin').val(route.legs[0].start_address);
	$('#input_destination').val(route.legs[route.legs.length - 1].end_address);
	var c = 1;
	var i = 0;
	
	for(i = 0; i < route.legs.length; i++){
		for(var j = 0; j < route.legs[i].via_waypoints.length; j++){
			$('#input_waypoint_' + ('0' + c).slice(-2)).val(
				route.legs[i].via_waypoints[j].toUrlValue()
			);
			c++;
		}
	}
	for(i = c; i <= 8; i++){
		$('#input_waypoint_' + ('0' + i).slice(-2)).val('');
	}
}

function createGPXDownloadLink(){
	'use strict';
	try{
		var buf = [];
		
		buf.push('<?xml version="1.0" encoding="UTF-8"?>');
		buf.push('<gpx' +
			' version="1.0"' +
			' creator="Create GPX Route with Google Maps API v3"' +
			' xmlns="http://www.topografix.com/GPX/1/0"' +
			' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
			' xsi:schemaLocation="http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd"' +
			'>');
		buf.push('<desc>' + escapeXMLString(gpxdata.desc) + '<\/desc>');
		buf.push('<url>http://www.330k.info/<\/url>');
		buf.push('<bounds' +
			' minlat="' + gpxdata.bounds.minlat + '"' +
			' minlon="' + gpxdata.bounds.minlon + '"' +
			' maxlat="' + gpxdata.bounds.maxlat + '"' +
			' maxlon="' + gpxdata.bounds.maxlon + '"' +
			' /\>');
		buf.push('<trk>');
		buf.push('<name>' + escapeXMLString(gpxdata.name) + '<\/name>');
		buf.push('<trkseg>');
		var trkseg = gpxdata.trksegs[0];
		for(var i = 0; i < trkseg.length; i++){
			if(trkseg[i].enabled){
				buf.push('<trkpt lat="' + trkseg[i].lat.toFixed(5) +
					'" lon="' + trkseg[i].lon.toFixed(5) + '">' +
					((trkseg[i].ele !== null) ? '<ele>' + trkseg[i].ele.toFixed(2) + '<\/ele>': '') +
					'<\/trkpt>');
			}
		}
		buf.push('<\/trkseg>');
		buf.push('<\/trk>');
		buf.push('<\/gpx>');
		
		var gpx = buf.join('\n');
		document.getElementById('gpx_text').value = gpx;
		var e = document.getElementById('gpx_download_link');
	
		window.URL = window.URL || window.webkitURL;
		window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
		if(window.URL && window.URL.createObjectURL){
			var blob = null;
			try{
				blob = new Blob([gpx], {type:'application/xml'});
			}catch(err){
				var bb = new BlobBuilder();
				bb.append(gpx);
				blob = bb.getBlob('application/xml');
			}
			
			e.href = window.URL.createObjectURL(blob);
		}else{
			e.href = 'data:application/octet-stream,' + encodeURIComponent(gpx);
			e.setAttribute('target', '_blank');
		}
		e.setAttribute('download', document.getElementById('input_download_filename').value);
		
		setTimeout(function(){
			var info = calcDistance();
			$('#gpx_info').html(
				'<div>' + info.points + ' points<\/div>' +
				'<div>Total Distance: ' + (info.total_distance * 0.001).toFixed(3) + ' km<\/div>' +
				'<div>Total Elevation: ' + info.total_elevation.toFixed(2) + ' m<\/div>'
			);
		}, 0);
		setTimeout(function(){
			$('#graph_canvas').highcharts(createGraphData());
			$('#graph_canvas').highcharts().setSize($('#graph_panel').innerWidth(), $('#graph_panel').innerHeight());
			drawSimplifiedLine();
		}, 0);
		
	}catch(err){
		//alert('ブラウザが対応していません');
		alert(err);
	}
}

function escapeXMLString(str){
	'use strict';
	var result = str;
	
	if(typeof result === 'string'){
		result = result.replace('&', '&amp;');
		result = result.replace('>', '&gt;');
		result = result.replace('<', '&lt;');
		result = result.replace('"', '&quot;');
		result = result.replace('\'', '&apos;');
	}else{
		result = '';
	}
	
	return result;
}

var calcDistance = (function(){
	'use strict';
	
	var hubeny = (function(){
		var a = 6378137.0;
		var b = 6356752.314245;
		var f2 = b * b / (a * a);
		var e2 = 1.0 - f2;
		var degree = Math.PI / 180.0;
		var sin = Math.sin;
		var cos = Math.cos;
		var sqrt = Math.sqrt;
		return function (lat1, lon1, lat2, lon2){
			var latdiff = (lat1 - lat2) * degree;
			var londiff = (lon1 - lon2) * degree;
			var latave = 0.5 * (lat1 + lat2) * degree;
			var sinlatave = sin(latave);
			var coslatave = cos(latave);
			var w2 = 1.0 - sinlatave * sinlatave * e2;
			var w = sqrt(w2);
			var meridian = a * f2 / (w2 * w);
			var n = a / w;
	
			return sqrt(
				latdiff * latdiff * meridian * meridian +
				londiff * londiff * n * n * coslatave * coslatave
			);
		}
	})();
	
	return function(){
		var total_dist = 0.0;
		var total_ele = 0.0;
		var oldele = null;
		
		if(typeof gpxdata.trksegs[0][0] === 'undefined'){
			return {
				points: 0,
				total_distance: 0.0,
				total_elevation: 0.0
			};
		}
		
		var enabledtrkpts = [];
		var trkseg = gpxdata.trksegs[0];
		var i = 0;
		for(i = 0; i < trkseg.length; i++){
			if(trkseg[i].enabled){
				enabledtrkpts.push(trkseg[i]);
			}
		}
		
		trkseg[0].total_distance = 0.0;
		for(i = 1; i < enabledtrkpts.length; i++){
			total_dist += hubeny(
				enabledtrkpts[i - 1].lat,
				enabledtrkpts[i - 1].lon,
				enabledtrkpts[i].lat,
				enabledtrkpts[i].lon
			);
			
			if(enabledtrkpts[i].ele !== null){
				if((oldele !== null) && (enabledtrkpts[i].ele > oldele)){
					total_ele += enabledtrkpts[i].ele - oldele;
				}
				oldele = enabledtrkpts[i].ele;
			}
			enabledtrkpts[i].total_distance = total_dist;
			enabledtrkpts[i].total_elevation = total_ele;
		}
		
		return {
			points: enabledtrkpts.length,
			total_distance: total_dist,
			total_elevation: total_ele
		};
	};
})();

var addElevationToGPX = (function(){
	'use strict';
	var UNIT = 100;
	var WAIT = 1000;
	
	var elecache = {};
	var elevationService = null;
	
	if(typeof localStorage !== 'undefined'){
		try{
			elecache = JSON.parse(localStorage.getItem('elecache'));
			if(elecache === null){
				elecache = {};
			}
		}catch(err){
		}
		window.unload = (function(){
			try{
				localStorage.setItem('elecache', JSON.stringify(elecache));
			}catch(err){
			}
		});
	}
	
	function getElevation(locations, callback) {
		if(elevationService === null){
			elevationService = new google.maps.ElevationService();
		}
		elevationService.getElevationForLocations({
			locations: locations
		}, function(results, status) {
			if (status === google.maps.ElevationStatus.OK) {
				callback(results);
			} else if (status === google.maps.ElevationStatus.INVALID_REQUEST) {
				console.log('リクエストに問題アリ！requestで渡している内容を確認せよ！！');
			} else if (status === google.maps.ElevationStatus.OVER_QUERY_LIMIT) {
				console.log('短時間にクエリを送りすぎ！落ち着いて！！');
			} else if (status === google.maps.ElevationStatus.REQUEST_DENIED) {
				console.log('このページでは ElevationResult の利用が許可されていない！・・・なぜ！？');
			} else if (status === google.maps.ElevationStatus.UNKNOWN_ERROR) {
				console.log('原因不明のなんらかのトラブルが発生した模様。');
			} else {
				console.log('えぇ～っと・・、バージョンアップ？');
			}
		});

	}
	
	return function(callback){
		var locations = [];
		var count = 0;
	
		var enabledtrkpts = [];
		var trkseg = gpxdata.trksegs[0];
		var i = 0;
		for(i = 0; i < trkseg.length; i++){
			if((trkseg[i].enabled) && (trkseg[i].ele === null)){
				var cache = elecache[(new google.maps.LatLng(trkseg[i].lat, trkseg[i].lon)).toUrlValue()];
				if(cache){
					trkseg[i].ele = cache - 0;
				}else{
					enabledtrkpts.push(trkseg[i]);
				}
			}
		}
		var total = enabledtrkpts.length;
		
		if(total === 0){
			callback({
				state: 'finished',
				content: ''
			});
			return;
		}
		
		callback({
			state: 'processing',
			content: 'requesting... ',
			max: total,
			value: 0
		});
		// Google Elevations Service
		for(var j = 0; j < total; j += UNIT){
			locations = [];
			for(i = j; (i < j + UNIT) && (i < total); i++){
				locations.push(new google.maps.LatLng(
					enabledtrkpts[i].lat,
					enabledtrkpts[i].lon
				));
			}
			(function(j, locations){
				setTimeout(function(){
					getElevation(locations, function(results){
						for(var i = 0; i < results.length; i++){
							enabledtrkpts[i + j].ele = results[i].elevation.toFixed(2) - 0;
							elecache[results[i].location.toUrlValue()] = results[i].elevation.toFixed(2);
						}
						count += locations.length;
			
						if(count >= total){
							callback({
								state: 'finished',
								content: ''
							});
						}else{
							callback({
								state: 'processing',
								content: 'processing... ' + count + '/' + total,
								max: total,
								value: count
							});
						}
					});
				}, j * WAIT / UNIT);
			})(j, locations);
		}
		callback({
			state: 'processing',
			content: 'processing... ' + 0 + '/' + total,
			max: total,
			value: 0
		});
	};
})();

var simplifyGPX = (function(){
	'use strict';
	
	var degree = Math.PI / 180.0;
	var quadpi = Math.PI / 4.0;
	function setPriorityToTrkpts(){
		if(typeof gpxdata.trksegs[0][0] === 'undefined'){
			return;
		}
		
		var pts = [];
		var trkseg = gpxdata.trksegs[0];
		
		// メルカトル図法で投影
		for(var i = 0; i < trkseg.length; i++){
			pts[i] = [
				trkseg[i].lon * degree,
				Math.log(Math.abs(Math.tan(quadpi + 0.5 * trkseg[i].lat * degree)))
			];
		}
	
		var queue = new PriorityQueue();
		var farthest = findFarthest(pts, 0, pts.length - 1);
		queue.enqueue(farthest.dist, farthest);
		trkseg[0].priority = 1;
		trkseg[pts.length - 1].priority = 2;
		var count = 2;
		
		while(queue.size()){
			var v = queue.dequeue();
			count++;
			if(v.pos >= 0){
				trkseg[v.pos].priority = count;
			}
		
			if(v.start + 2 <= v.pos){
				farthest = findFarthest(pts, v.start, v.pos);
				queue.enqueue(farthest.dist, farthest);
			}
			if(v.pos + 2 <= v.end){
				farthest = findFarthest(pts, v.pos, v.end);
				queue.enqueue(farthest.dist, farthest);
			}
		}

		return;
	}
	
	function findFarthest(pts, start, end){
		var ax = pts[start][0];
		var ay = pts[start][1];
		var bx = pts[end][0];
		var by = pts[end][1];
		var d = 0.0;
		var m = -Number.MAX_VALUE;
		var c = -1;
	
		for(var i = start + 1; i < end; i++){
			d = segmentPointDistance(ax, ay, bx, by, pts[i][0], pts[i][1]);
			if(m < d){
				m = d;
				c = i;
			}
		}
	
		return {start:start, end:end, pos:c, dist:m};
	}

	function segmentPointDistance(ax, ay, bx, by, px, py){
		var t = (ax * ax + ay * ay + bx * px - ax * (bx + px) + by * py - ay * (by + py))/(ax * ax + ay * ay - 2 * ax * bx + bx * bx - 2 * ay * by + by * by);
	
		if((0 <= t) && (t <= 1)){
			var x = ax - (ax - bx) * t;
			var y = ay - (ay - by) * t;
			
			return ((x - px) * (x - px) + (y - py) * (y - py));
		}else if(t > 1){
			return ((bx - px) * (bx - px) + (by - py) * (by - py));
		}else{
			// includes A === B
			return ((ax - px) * (ax - px) + (ay - py) * (ay - py));
		}
	}
	
	// Pairingヒープ
	function PriorityQueue(){
		this.name = 'Pairing Heap';
		this._size = 0;
		this._root = null;
	
		this._merge = function (i, j){
			if(i === null) return j;
			if(j === null) return i;
		
			if(i.p < j.p){
				var ret = i;
				i = j;
				j = ret;
			}
			j.next = i.head;
			i.head = j;
		
			return i;
		};
		this._mergeList = function (s){
			var n = null;
		
			while(s !== null){
				var a = s;
				var b = null;
				s = s.next;
				a.next = null;
				if(s !== null){
					b = s;
					s = s.next;
					b.next = null;
				}
				a = this._merge(a, b);
				a.next = n;
				n = a;
			}
			while(n !== null){
				var j = n;
				n = n.next;
				s = this._merge(j, s);
			}
			return s;
		};
	
		this.enqueue = function(priority, value){
			this._root = this._merge(this._root, {
				p: priority,
				v: value,
				next: null,
				head: null
			});
			this._size++;
		};
		this.dequeue = function(){
			var result = this._root.v;
			this._root = this._mergeList(this._root.head);
			this._size--;
		
			return result;
		};
		this.size = function(){
			return this._size;
		};
	
		return this;
	}
	
	return function(reduced_points){
		var reducedPoints = reduced_points || 400;
		var trkseg = gpxdata.trksegs[0];
		var i = 0;
		
		for(i = 0; i < trkseg.length; i++){
			if(trkseg[i].priority === null){
				setPriorityToTrkpts();
				break;
			}
		}
		
		if(reducedPoints <= 0){
			// make all points enabled
			for(i = 0; i < trkseg.length; i++){
				trkseg[i].enabled = true;
			}
		}else{
			for(i = 0; i < trkseg.length; i++){
				if(trkseg[i].priority <= reducedPoints){
					trkseg[i].enabled = true;
				}else{
					trkseg[i].enabled = false;			
				}
			}
		}
	};
})();

var createGraphData = (function(){
	'use strict';
	var marker = null;
	
	return function(){
		var trkseg = gpxdata.trksegs[0];
		var pointdata = {};
		var data = {
			chart: {
				type: 'area',
				animation: false,
				zoomType: 'x'
			},
			legend: {
				enabled: false
			},
			title: null,
			xAxis: {
				title: {
					text: 'distance (km)'
				},
				gridLineWidth: 1,
				lineColor: '#000',
				tickColor: '#000'
			},
			yAxis: {
				title: {
					text: 'evelation (m)'
				},
				gridLineWidth: 1,
				lineColor: '#000',
				tickColor: '#000'
			},
			plotLines: [{
				value: 0,
				width: 4,
				color: '#808080'
			}],
			plotOptions: {
				series: {
					animation: false,
					marker: {
						enabled: false
					},
					allowPointSelect: true,
					point: {
						events: {
							mouseOver: function(){
								map.setCenter(pointdata[this.x]);
								if(marker.getMap() === null){
									marker.setMap(map);
								}
								marker.setPosition(pointdata[this.x]);
							}
						}
					},
					events: {
						mouseOut: function(){
							marker.setMap(null);
						}
					}
				}
			},
			series: [{
				name: 'evelation',
				data: []
			}]
		};
		if(marker === null){
			marker = new google.maps.Marker({
				position: null,
				map: null
			});
		}
		
		for(var i = 0; i < trkseg.length; i++){
			if(trkseg[i].enabled && trkseg[i].total_distance && trkseg[i].ele){
				var dist = (trkseg[i].total_distance * 0.001).toFixed(3) - 0;
				data.series[0].data.push([
					dist,
					trkseg[i].ele.toFixed(2) - 0
				]);
				pointdata[dist] = new google.maps.LatLng(trkseg[i].lat, trkseg[i].lon);
			}
		}
		
		return data;
	};
})();

var drawSimplifiedLine = (function(){
	'use strict';
	var linePath = null;

	return function(){
		var lineCoordinates = [];
		var trkseg = gpxdata.trksegs[0];
		var showSimplifiedLine = false;
		
		for(var i = 0; i < trkseg.length; i++){
			if(trkseg[i].enabled){
				lineCoordinates.push(
					new google.maps.LatLng(trkseg[i].lat, trkseg[i].lon)
				);
			}else{
				showSimplifiedLine = true;
			}
		}
		
		if(showSimplifiedLine){
			if(linePath){
				linePath.setPath(lineCoordinates);
			}else{
				linePath = new google.maps.Polyline({
					path: lineCoordinates,
					strokeColor: "#FF0000",
					strokeOpacity: 1,
					strokeWeight: 2,
					zIndex: 100,
					clickable: false,
					map: map
				});
			}
		}else{
			linePath.setMap(null);
			linePath = null;
		}
	};
})();

</script>
</body>
</html>
]]>
</Content>
</Module>
